{"version":3,"sources":["webpack:///./src/prefabs/MapElement.ts","webpack:///./src/utils/mathUtils.ts","webpack:///./src/index.ts","webpack:///./src/states/BootState.ts","webpack:///./src/states/PreloadState.ts","webpack:///./src/states/GameState.ts","webpack:///./src/prefabs/Terrain.ts","webpack:///./src/utils/boardUtils.ts","webpack:///./src/prefabs/Item.ts","webpack:///./src/prefabs/Enemy.ts","webpack:///./src/states/GameOverState.ts"],"names":["exports","default","Phaser","TileSprite","[object Object]","game","x","y","size","texture","frames","super","this","anchor","set","length","animations","add","play","alive","exists","visible","randomBetween","a","b","isInteger","numBetween","Math","random","floor","__webpack_require__","BootState_1","PreloadState_1","GameState_1","GameOverState_1","Game","config","state","start","width","height","renderer","AUTO","parent","resolution","State","stage","backgroundColor","scale","scaleMode","ScaleManager","NO_SCALE","pageAlignHorizontally","pageAlignVertically","load","image","preloadBar","sprite","world","centerX","centerY","setTo","setPreloadSprite","spritesheet","undefined","json","Terrain_1","mathUtils_1","ROWS","COLS","TILE_SIZE","LABEL_STYLE","font","fill","align","defaultGameData","theme","stats","health","attack","defense","gold","hasKey","__board","rows","cols","data","__currentFloor","__playerStats","Object","assign","__currentTheme","__levelData","cache","getJSON","__backgroundTiles","group","__mapElements","createBackgroundTiles","cell","clearDarknessTile","__darkTiles","createProps","createItems","item","refreshStats","kill","createKey","levels","key","showLabel","createEnemies","enemy","damage","round","max","toString","tween","to","tint","onComplete","addOnce","tweens","removeFrom","newHealth","ceil","camera","flash","onFlashComplete","gameOver","createExit","exit","nextLevel","entranceCell","createEntrance","createDarkTiles","__walls","createWalls","initGui","__hudMessages","__healthLabel","text","__attackLabel","__defenseLabel","__goldLabel","__keyIcon","alpha","__healthIcon","frame","fade","onFadeComplete","bitmapRect","bitmapData","ctx","fillStyle","fillRect","style","tileSprite","__attackIcon","__defenseIcon","__goldIcon","__levelLabel","name","input","enabled","mapElement","message","duration","label","Text","destroy","boardUtils","MapElement_1","Item_1","Enemy_1","getFreeCell","board","freeCell","currentCell","foundCell","currentChild","row","col","i","len","children","getCellFromXY","levelData","onInput","tile","level","j","tiles","inputEnabled","events","onInputDown","Group","levelIndex","numCells","countCells","numItems","coefs","propOccupation","propVariation","currentLevel","props","common","type","propData","prop","point","getXYFromCell","onCollect","itemOccupation","itemVariation","itemData","createListener","items","onAttack","enemyOccupation","enemyVariation","enemyData","coef","pow","levelIncrement","enemies","position","onExit","entrance","darkTiles","mapElements","considerEnemies","considerNeighbors","considerClear","surroundingCells","getSurroundingCells","currentDarkTileIndex","getIndexFromCell","currentDarkTile","currentMapElementPoint","currentMapElement","find","el","findIndex","c","index","darkTile","cells","some","forEach","walls","top","side","relativePositions","adjacentTiles","relPos","relRow","relCol","push","getCellFromIndex","compareCells","__data","keyboard","addCallbacks","removeCallbacks"],"mappings":"iGAAAA,EAAAC,sBAAwCC,OAAOC,WAC7CC,YAAYC,EAAkBC,EAAUC,EAAUC,EAAaC,EAAgBC,GAC7EC,MAAMN,EAAMC,EAAGC,EAAGC,EAAMA,EAAMC,EAASC,EAAO,IAE9CE,KAAKC,OAAOC,IAAI,GAAI,IAEhBJ,EAAOK,OAAS,IAClBH,KAAKI,WAAWC,IAAI,OAAQP,EAAQ,IAAI,GACxCE,KAAKM,KAAK,SAGdd,OACEQ,KAAKO,MAAQP,KAAKQ,OAASR,KAAKS,SAAU,sFCZjCrB,EAAAsB,cAAgB,EAACC,EAAUC,EAAUC,GAAkB,KAClE,IAAIC,EAAoBH,EAAII,KAAKC,UAAYJ,EAAID,GAMjD,OAJIE,IACFC,EAAaC,KAAKE,MAAMH,IAGnBA,wFCPTI,EAAA,GACAA,EAAA,GACAA,EAAA,GAEA,MAAAC,EAAAD,EAAA,IACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,IACAI,EAAAJ,EAAA,IAuBA,kBArBkB5B,OAAOiC,KACvB/B,YAAYgC,GACVzB,MAAMyB,GAENxB,KAAKyB,MAAMpB,IAAI,OAAQc,EAAA9B,SACvBW,KAAKyB,MAAMpB,IAAI,UAAWe,EAAA/B,SAC1BW,KAAKyB,MAAMpB,IAAI,OAAQgB,EAAAhC,SACvBW,KAAKyB,MAAMpB,IAAI,WAAYiB,EAAAjC,SAE3BW,KAAKyB,MAAMC,MAAM,WAKnBC,MAAO,IACPC,OAAQ,IACRC,SAAUvC,OAAOwC,KACjBC,OAAQ,OACRC,WAAY,mFC3Bd5C,EAAAC,sBAAuCC,OAAO2C,MAC5CzC,OACEQ,KAAKP,KAAKyC,MAAMC,gBAAkB,OAClCnC,KAAKoC,MAAMC,UAAY/C,OAAOgD,aAAaC,SAC3CvC,KAAKoC,MAAMI,uBAAwB,EACnCxC,KAAKoC,MAAMK,qBAAsB,EAEnCjD,UACEQ,KAAK0C,KAAKC,MAAM,MAAO,mCAEzBnD,SACEQ,KAAKyB,MAAMC,MAAM,4FCXrBtC,EAAAC,sBAA0CC,OAAO2C,MAC/CzC,UACE,MAAMoD,EAAa5C,KAAKK,IAAIwC,OAAO7C,KAAKP,KAAKqD,MAAMC,QAAS/C,KAAKP,KAAKqD,MAAME,QAAS,OACrFJ,EAAW3C,OAAOgD,MAAM,IACxBL,EAAWR,MAAMa,MAAM,IAAK,GAE5BjD,KAAK0C,KAAKQ,iBAAiBN,GAE3B5C,KAAK0C,KAAKS,YAAY,SAAU,8BAA+B,GAAI,QAAIC,EAAW,EAAG,GACrFpD,KAAK0C,KAAKS,YAAY,QAAS,6BAA8B,GAAI,QAAIC,EAAW,EAAG,GACnFpD,KAAK0C,KAAKS,YAAY,UAAW,+BAAgC,GAAI,QAAIC,EAAW,EAAG,GAEvFpD,KAAK0C,KAAKW,KAAK,eAAgB,iCAEjC7D,SACEQ,KAAKyB,MAAMC,MAAM,yFCfrB,MAAA4B,EAAApC,EAAA,IAgBAqC,EAAArC,EAAA,GAEMsC,EAAO,GACPC,EAAO,GAEPC,EAAY,GAEZC,GACJC,KAAM,YACNC,KAAM,UACNC,MAAO,UAGHC,GACJ9C,MAAO,EACP+C,MAAO,EACPC,OACEC,OAAQ,GACRC,OAAQ,EACRC,QAAS,EACTC,KAAM,EACNC,QAAQ,IAIZlF,EAAAC,sBAAuCC,OAAO2C,MAA9CzC,kCAoBYQ,KAAAuE,SACRC,KAAMhB,EACNiB,KAAMhB,EACN7D,KAAM8D,GAmBRlE,KAAKkF,EAAeX,GAClB/D,KAAK2E,eAAiBD,EAAKzD,MAC3BjB,KAAK4E,cAAaC,OAAAC,UAAQJ,EAAKT,OAC/BjE,KAAK+E,eAAiBL,EAAKV,MAG7BxE,SACEQ,KAAKgF,YAAchF,KAAKP,KAAKwF,MAAMC,QAAQ,gBAE3ClF,KAAKmF,kBAAoBnF,KAAKP,KAAKY,IAAI+E,QACvCpF,KAAKmF,kBAAkBzF,EAAIM,KAAKuE,QAAQ3E,KACxCI,KAAKmF,kBAAkBxF,EAAIK,KAAKuE,QAAQ3E,KAExCI,KAAKqF,cAAgBrF,KAAKP,KAAKY,IAAI+E,QACnCpF,KAAKqF,cAAc3F,EAAIM,KAAKuE,QAAQ3E,KACpCI,KAAKqF,cAAc1F,EAAIK,KAAKuE,QAAQ3E,KAEpC0D,EAAAgC,sBAAsBtF,KAAKmF,kBAAmBnF,KAAKgF,YAAahF,KAAK+E,eAAgB/E,KAAKuE,QAAUgB,IAClGjC,EAAAkC,kBAAkBxF,KAAKyF,YAAazF,KAAKqF,cAAeE,EAAMvF,KAAKuE,SAAS,KAG9EjB,EAAAoC,YAAY1F,KAAKqF,cAAerF,KAAKuE,QAASvE,KAAKgF,YAAahF,KAAK+E,gBAErEzB,EAAAqC,YAAY3F,KAAKqF,cAAerF,KAAKuE,QAASvE,KAAKgF,YAAa,CAACO,EAAYK,KAC3EtC,EAAAkC,kBAAkBxF,KAAKyF,YAAazF,KAAKqF,cAAeE,EAAMvF,KAAKuE,SAAS,GAAM,GAAO,GAEzFvE,KAAK4E,cAAcP,MAAQuB,EAAKlB,KAAKL,MAAQ,EAC7CrE,KAAK4E,cAAcV,QAAU0B,EAAKlB,KAAKR,QAAU,EACjDlE,KAAK4E,cAAcT,QAAUyB,EAAKlB,KAAKP,QAAU,EACjDnE,KAAK4E,cAAcR,SAAWwB,EAAKlB,KAAKN,SAAW,EAEnDpE,KAAK6F,eAELD,EAAKE,SAGPxC,EAAAyC,UAAU/F,KAAKqF,cAAerF,KAAKgF,YAAYgB,OAAOhG,KAAK+E,gBAAgBkB,IAAKjG,KAAKuE,QAAS,CAACgB,EAAYU,KACzG3C,EAAAkC,kBAAkBxF,KAAKyF,YAAazF,KAAKqF,cAAeE,EAAMvF,KAAKuE,SAAS,GAAM,GAElFvE,KAAK4E,cAAcN,QAAS,EAE5BtE,KAAK6F,eAELI,EAAIH,OAEJ9F,KAAKkG,UAAUD,EAAK,mCAAoC,OAG1D3C,EAAA6C,cAAcnG,KAAKqF,cAAerF,KAAKuE,QAASvE,KAAKgF,YAAahF,KAAK+E,eAAgB/E,KAAK2E,eAAgB,CAACY,EAAYa,KACvH,MAAMC,EAAStF,KAAKuF,MAC8E,IAAhGvF,KAAKwF,IAAI,GAAKvG,KAAK4E,cAAcT,OAASpD,KAAKC,SAAWoF,EAAM1B,KAAKN,QAAUrD,KAAKC,WAClF,IAEJoF,EAAM1B,KAAKR,QAAUmC,EAErBrG,KAAKkG,UAAUE,EAAOC,EAAOG,YAE7BxG,KAAKP,KAAKY,IAAIoG,MAAML,GACjBM,IAAKC,KAAM,UAAY,IAAK,MAAM,GAClCC,WAAWC,QAAQ,KAKlB,GAJA7G,KAAKP,KAAKqH,OAAOC,WAAWX,GAE5BA,EAAMO,KAAO,SAETP,EAAM1B,KAAKR,QAAU,EACvBlE,KAAK4E,cAAcP,MAAQ+B,EAAM1B,KAAKL,KAEtC+B,EAAMN,OAENxC,EAAAkC,kBAAkBxF,KAAKyF,YAAazF,KAAKqF,cAAeE,EAAMvF,KAAKuE,SAAS,GAAM,GAAO,OACpF,CACL,MAAMyC,EAAYhH,KAAK4E,cAAcV,OAASnD,KAAKwF,IAAI,GAAKH,EAAM1B,KAAKP,OAASpD,KAAKC,SAAWhB,KAAK4E,cAAcR,QAAUrD,KAAKC,UAC9HD,KAAKkG,KAAKjH,KAAK4E,cAAcV,QAAUnD,KAAKkG,KAAKD,KACnDhH,KAAKkH,OAAOC,MAAM,SAAU,KAAK,EAAO,KACxCnH,KAAKkH,OAAOE,gBAAgBP,QAAQ,KAClC7G,KAAK4E,cAAcV,OAAS8C,KAKlChH,KAAK6F,eAED7F,KAAK4E,cAAcV,QAAU,GAC/BlE,KAAKqH,eAKb/D,EAAAgE,WAAWtH,KAAKqF,cAAerF,KAAKgF,YAAYgB,OAAOhG,KAAK+E,gBAAgBwC,KAAMvH,KAAKuE,QAAS,CAACgB,EAAYgC,KACvGvH,KAAK4E,cAAcN,OACrBtE,KAAKwH,YAELxH,KAAKkG,UAAUqB,EAAM,iBAAkB,OAI3C,MAAME,EAAenE,EAAAoE,eAAe1H,KAAKqF,cAAerF,KAAKuE,SAE7DvE,KAAKyF,YAAcnC,EAAAqE,gBAAgB3H,KAAKP,KAAMO,KAAKuE,SACnDvE,KAAKyF,YAAY/F,EAAIM,KAAKuE,QAAQ3E,KAClCI,KAAKyF,YAAY9F,EAAIK,KAAKuE,QAAQ3E,KAElC0D,EAAAkC,kBAAkBxF,KAAKyF,YAAazF,KAAKqF,cAAeoC,EAAczH,KAAKuE,SAAS,GAAM,GAAO,GAEjGvE,KAAK4H,QAAU5H,KAAKP,KAAKY,IAAI+E,QAE7B9B,EAAAuE,YAAY7H,KAAK4H,QAAS5H,KAAKgF,YAAahF,KAAK+E,eAAgB/E,KAAKuE,SAEtEvE,KAAK8H,UAEL9H,KAAK6F,eAEL7F,KAAK+H,cAAgB/H,KAAKP,KAAKY,IAAI+E,QACnCpF,KAAK+H,cAAcrI,EAAIM,KAAKuE,QAAQ3E,KACpCI,KAAK+H,cAAcpI,EAAIK,KAAKuE,QAAQ3E,KAGtCJ,eACEQ,KAAKgI,cAAcC,KAAOlH,KAAKkG,KAAKjH,KAAK4E,cAAcV,QAAQsC,WAC/DxG,KAAKkI,cAAcD,KAAOlH,KAAKkG,KAAKjH,KAAK4E,cAAcT,QAAQqC,WAC/DxG,KAAKmI,eAAeF,KAAOlH,KAAKkG,KAAKjH,KAAK4E,cAAcR,SAASoC,WACjExG,KAAKoI,YAAYH,KAAOlH,KAAKkG,KAAKjH,KAAK4E,cAAcP,MAAMmC,WAE3DxG,KAAKqI,UAAUC,MAAQtI,KAAK4E,cAAcN,OAAS,EAAM,IAErDtE,KAAK4E,cAAcV,OAAS,EAC9BlE,KAAKuI,aAAaC,MAAQ,GACjBxI,KAAK4E,cAAcV,OAAS,GACrClE,KAAKuI,aAAaC,MAAQ,GAE1BxI,KAAKuI,aAAaC,MAAQ,GAI9BhJ,YACEQ,KAAKkH,OAAOuB,KAAK,GACjBzI,KAAKkH,OAAOwB,eAAe7B,QAAQ,KACjC7G,KAAKP,KAAKgC,MAAMC,MAAM,QAAQ,GAAM,GAClCT,MAAOjB,KAAK2E,eAAiB,EAC7BX,MAAOT,EAAA7C,cAAc,EAAGV,KAAKgF,YAAYgB,OAAO7F,QAAQ,GACxD8D,MAAKY,OAAAC,UAAO9E,KAAK4E,eAAeN,QAAQ,QAKpC9E,UACR,MACMG,EAAI+D,EAAYF,EAAOE,EAEvBiF,EAAa3I,KAAKK,IAAIuI,WAAW5I,KAAKP,KAAKkC,MAAO3B,KAAKP,KAAKmC,OAAS8B,GAE3EiF,EAAWE,IAAIC,UAAY,UAC3BH,EAAWE,IAAIE,SAAS,EAAG,EAAG/I,KAAKP,KAAKkC,MAAO+B,GAE/C1D,KAAKK,IAAIwC,OAAO,EAAGlD,EAAGgJ,GAEtB,MAAMK,GACJpF,KAAM,aACNC,KAAM,OACNC,MAAO,QAGT9D,KAAKuI,aAAevI,KAAKK,IAAI4I,WAhBnB,EAgBiCtJ,EAAG+D,EAAWA,EAAW,QAAS,IAC7E1D,KAAKgI,cAAgBhI,KAAKK,IAAI4H,KAjBpB,EAiB6BvE,EAAW/D,EAAI,GAAI,MAAOqJ,GAEjEhJ,KAAKkJ,aAAelJ,KAAKK,IAAI4I,WAnBnB,EAmB8C,EAAZvF,EAAe/D,EAAG+D,EAAWA,EAAW,QAAS,IAC7F1D,KAAKkI,cAAgBlI,KAAKK,IAAI4H,KApBpB,EAoByC,EAAZvE,EAAe/D,EAAI,GAAI,MAAOqJ,GAErEhJ,KAAKmJ,cAAgBnJ,KAAKK,IAAI4I,WAtBpB,EAsB+C,EAAZvF,EAAe/D,EAAG+D,EAAWA,EAAW,QAAS,KAC9F1D,KAAKmI,eAAiBnI,KAAKK,IAAI4H,KAvBrB,EAuB0C,EAAZvE,EAAe/D,EAAI,GAAI,MAAOqJ,GAEtEhJ,KAAKoJ,WAAapJ,KAAKK,IAAI4I,WAzBjB,EAyB4C,EAAZvF,EAAe/D,EAAG+D,EAAWA,EAAW,QAAS,IAC3F1D,KAAKoI,YAAcpI,KAAKK,IAAI4H,KA1BlB,EA0BuC,EAAZvE,EAAe/D,EAAI,GAAI,OAAQqJ,GAEpEhJ,KAAKqI,UAAYrI,KAAKK,IAAI4I,WA5BhB,EA4B+BvF,EAAYD,EAAOC,EAAW/D,EAAG+D,EAAWA,EAAW,QAAS1D,KAAKgF,YAAYgB,OAAOhG,KAAK+E,gBAAgBkB,IAAI,IAE1JjG,KAAKqJ,aAAerJ,KAAKK,IAAI4H,KAAK,GAAI,MAAOjI,KAAKgF,YAAYgB,OAAOhG,KAAK+E,gBAAgBuE,eAAetJ,KAAK2E,iBAAgBE,OAAAC,UACzHkE,GACHpF,KAAM,eAIApE,WACRQ,KAAKP,KAAK8J,MAAMC,SAAU,EAC1BxJ,KAAKkH,OAAOuB,KAAK,QAAU,KAAK,EAAM,GACtCzI,KAAKkH,OAAOwB,eAAe7B,QAAQ,KACjC7G,KAAKP,KAAK8J,MAAMC,SAAU,EAC1BxJ,KAAKP,KAAKgC,MAAMC,MAAM,cAIhBlC,UAAUiK,EAAuBC,EAAgBC,EAAgB,KACzE,MAAMC,EAAQ,IAAItK,OAAOuK,KAAK7J,KAAKP,KAAMgK,EAAW/J,EAAG+J,EAAW9J,EAAG+J,EAAS/F,GAE9EiG,EAAM3J,OAAOgD,MAAM,GAAI,IAEvBjD,KAAKP,KAAKY,IAAIoG,MAAMmD,GACjBlD,IAAK/G,EAAGiK,EAAMjK,EAAwB,GAApB8J,EAAW7H,OAAa0G,MAAO,KAAQqB,EAAU,MAAM,GACzE/C,WAAWC,QAAQ,KAClB+C,EAAME,SAAQ,KAGlB9J,KAAK+H,cAAc1H,IAAIuJ,oFC5R3B,MAAAG,EAAA7I,EAAA,IACAqC,EAAArC,EAAA,GACA8I,EAAA9I,EAAA,GACA+I,EAAA/I,EAAA,IACAgJ,EAAAhJ,EAAA,IAEa9B,EAAA+K,YAAc,EAAC/E,EAAoBgF,KAC9C,IAAIC,EAAgBC,EAAmBC,EACnCC,EAAgCC,EAAYC,EAAYC,EAE5D,MAAMC,EAAMxF,EAAMjF,OAElB,MAAQkK,GAAU,CAMhB,IALAE,GAAY,EAEZE,EAAMlH,EAAA7C,cAAc,EAAG0J,EAAM5F,MAAM,GACnCkG,EAAMnH,EAAA7C,cAAc,EAAG0J,EAAM3F,MAAM,GAE9BkG,EAAI,EAAGA,EAAIC,EAAKD,IAGnB,GAFAH,EAAepF,EAAMyF,SAASF,GAC9BL,EAAcP,EAAWe,cAAcN,EAAcJ,GACjDI,GAAgBA,EAAajK,OAAS+J,EAAYG,MAAQA,GAAOH,EAAYI,MAAQA,EAAK,CAC5FH,GAAY,EACZ,MAICA,IACHF,GAAaI,MAAKC,QAItB,OAAOL,IAGIjL,EAAAkG,sBAAwB,EAACF,EAAoB2F,EAAsB/G,EAAcoG,EAAkBY,KAC9G,IAAIxC,EAAcyC,EAElB,MAAMC,EAAQH,EAAU/E,OAAOhC,GAE/B,IAAK,IAAI2G,EAAW,EAAGA,EAAIP,EAAM5F,KAAMmG,IACrC,IAAK,IAAIQ,EAAW,EAAGA,EAAIf,EAAM3F,KAAM0G,IACrC3C,EAAQjF,EAAA7C,cAAc,EAAGwK,EAAME,MAAMjL,QAAQ,IAC7C8K,EAAO,IAAI3L,OAAOC,WAAW6F,EAAM3F,KAAM0L,EAAIf,EAAMxK,KAAM+K,EAAIP,EAAMxK,KAAMwK,EAAMxK,KAAMwK,EAAMxK,KAAM,UAAWsL,EAAME,MAAM5C,KACnH6C,cAAe,EACpBJ,EAAKK,OAAOC,YAAYlL,IAAI,KAC1B2K,GAAUP,IAAKE,EAAGD,IAAKS,GAAKF,KAG9B7F,EAAM/E,IAAI4K,KAKH7L,EAAAuI,gBAAkB,EAAClI,EAAkB2K,KAChD,MAAMhF,EAAQ,IAAI9F,OAAOkM,MAAM/L,GAE/B,IAAIwL,EAEJ,IAAK,IAAIN,EAAW,EAAGA,EAAIP,EAAM5F,KAAMmG,IACrC,IAAK,IAAIQ,EAAW,EAAGA,EAAIf,EAAM3F,KAAM0G,KACrCF,EAAO,IAAI3L,OAAOC,WAAWE,EAAM0L,EAAIf,EAAMxK,KAAM+K,EAAIP,EAAMxK,KAAMwK,EAAMxK,KAAMwK,EAAMxK,KAAM,UAAW,MACjG0I,MAAQ,GAEblD,EAAM/E,IAAI4K,GAId,OAAO7F,IAGIhG,EAAAsG,YAAc,EAACN,EAAoBgF,EAAkBW,EAAsBU,KACtF,MAAMC,EAAW3B,EAAW4B,WAAWvB,GACjCwB,EAAW7K,KAAKuF,MAAMoF,EAAWX,EAAUc,MAAMC,eAAiBvI,EAAA7C,cAAc,EAAIqK,EAAUc,MAAME,cAAe,EAAIhB,EAAUc,MAAME,gBAEvIC,EAAejB,EAAU/E,OAAOyF,GAChCQ,MAAalB,EAAUmB,OAAOD,SAAUD,EAAaC,OAE3D,IAAIE,EAAaC,EAAgBC,EAAiB9G,EAAY+G,EAE9D,IAAK,IAAI3B,EAAI,EAAGA,EAAIiB,EAAUjB,IAG5ByB,EAAWH,EAFXE,EAAO5I,EAAA7C,cAAc,EAAGuL,EAAM9L,QAAQ,IAItCoF,EAAOnG,EAAA+K,YAAY/E,EAAOgF,GAC1BkC,EAAQvC,EAAWwC,cAAchH,EAAM6E,IAEvCiC,EAAO,IAAIrC,EAAA3K,QAAW+F,EAAM3F,KAAM6M,EAAM5M,EAAG4M,EAAM3M,EAAGyK,EAAMxK,KAAM,UAAWwM,EAAStM,SAC/EuL,cAAe,EAEpBjG,EAAM/E,IAAIgM,KAIDjN,EAAAuG,YAAc,EAACP,EAAoBgF,EAAkBW,EAAsByB,KACtF,MAAMd,EAAW3B,EAAW4B,WAAWvB,GACjCwB,EAAW7K,KAAKuF,MACpBoF,EAAWX,EAAUc,MAAMY,eAAiBlJ,EAAA7C,cAAc,EAAIqK,EAAUc,MAAMa,cAAe,EAAI3B,EAAUc,MAAMa,gBAGnH,IAAIP,EAAaQ,EAAgB/G,EAAWL,EAAY+G,EAExD,MAAMM,EAAiB,CAACrH,EAAMK,IAAS,IAAM4G,EAAUjH,EAAMK,GAE7D,IAAK,IAAI+E,EAAI,EAAGA,EAAIiB,EAAUjB,IAC5BwB,EAAO5I,EAAA7C,cAAc,EAAGqK,EAAU8B,MAAM1M,QAAQ,GAEhDwM,EAAW5B,EAAU8B,MAAMV,GAE3B5G,EAAOnG,EAAA+K,YAAY/E,EAAOgF,GAC1BkC,EAAQvC,EAAWwC,cAAchH,EAAM6E,IAEvCxE,EAAO,IAAIqE,EAAA5K,QAAK+F,EAAM3F,KAAM6M,EAAM5M,EAAG4M,EAAM3M,EAAGyK,EAAMxK,KAAM+M,IACrDlM,SAAU,EACfmF,EAAKyF,cAAe,EACpBzF,EAAK0F,OAAOC,YAAY1E,QAAQ+F,EAAerH,EAAMK,IAErDR,EAAM/E,IAAIuF,KAIDxG,EAAA+G,cAAgB,EAACf,EAAoBgF,EAAkBW,EAAsBU,EAAmBxK,EAAc6L,KACzH,MAAMpB,EAAW3B,EAAW4B,WAAWvB,GACjCwB,EAAW7K,KAAKuF,MACpBoF,EAAWX,EAAUc,MAAMkB,gBAAkBxJ,EAAA7C,cAAc,EAAIqK,EAAUc,MAAMmB,eAAgB,EAAIjC,EAAUc,MAAMmB,iBAG/GhB,EAAejB,EAAU/E,OAAOyF,GACtC,IAAIU,EAAac,EAAkB7G,EAAab,EAAY+G,EAE5D,MAAMM,EAAiB,CAACrH,EAAYa,IAAgB,IAAM0G,EAASvH,EAAMa,GACnE8G,EAAOnM,KAAKoM,IAAIpC,EAAUc,MAAMuB,eAAgBnM,GAChDoM,MAAetC,EAAUmB,OAAOmB,WAAYrB,EAAaqB,SAE/D,IAAK,IAAI1C,EAAI,EAAGA,EAAIiB,EAAUjB,IAG5BsC,EAAYI,EAFZlB,EAAO5I,EAAA7C,cAAc,EAAG2M,EAAQlN,QAAQ,IAIxCoF,EAAOnG,EAAA+K,YAAY/E,EAAOgF,GAC1BkC,EAAQvC,EAAWwC,cAAchH,EAAM6E,IAEvChE,EAAQ,IAAI8D,EAAA7K,QAAM+F,EAAM3F,KAAM6M,EAAM5M,EAAG4M,EAAM3M,EAAGyK,EAAMxK,KAAIiF,OAAAC,UACrDmI,GACH9I,OAAQ8I,EAAU9I,OAAS+I,EAC3B9I,QAAS6I,EAAU7I,QAAU8I,EAC7BhJ,OAAQ+I,EAAU/I,OAASgJ,EAC3B7I,KAAM4I,EAAU5I,KAAO6I,MAEnBzM,SAAU,EAChB2F,EAAMiF,cAAe,EACrBjF,EAAMkF,OAAOC,YAAYlL,IAAIuM,EAAerH,EAAMa,IAElDhB,EAAM/E,IAAI+F,KAIDhH,EAAA2G,UAAY,EAACX,EAAoBtF,EAAiBsK,EAAkBoC,KAC/E,MAAMjH,EAAanG,EAAA+K,YAAY/E,EAAOgF,GAChCkD,EAAkBvD,EAAWwC,cAAchH,EAAM6E,GACjDnE,EAAM,IAAI+D,EAAA3K,QAAW+F,EAAM3F,KAAM6N,EAAS5N,EAAG4N,EAAS3N,EAAGyK,EAAMxK,KAAM,QAASE,GAQpF,OAPAmG,EAAIxF,SAAU,EACdwF,EAAIoF,cAAe,EACnBpF,EAAIqF,OAAOC,YAAY1E,QAAQ,KAC7B2F,EAAUjH,EAAMU,KAElBb,EAAM/E,IAAI4F,GAEHV,IAGInG,EAAAkI,WAAa,EAAClC,EAAoBtF,EAAiBsK,EAAkBmD,KAChF,MAAMhI,EAAOnG,EAAA+K,YAAY/E,EAAOgF,GAC1BkD,EAAWvD,EAAWwC,cAAchH,EAAM6E,GAC1C7C,EAAO,IAAIyC,EAAA3K,QAAW+F,EAAM3F,KAAM6N,EAAS5N,EAAG4N,EAAS3N,EAAGyK,EAAMxK,KAAM,UAAWE,GAUvF,OARAyH,EAAKtH,OAAOC,IAAI,GAAI,IACpBqH,EAAK9G,SAAU,EACf8G,EAAK8D,cAAe,EACpB9D,EAAK+D,OAAOC,YAAYlL,IAAI,KAC1BkN,EAAOhI,EAAMgC,KAEfnC,EAAM/E,IAAIkH,GAEHhC,IAGInG,EAAAsI,eAAiB,EAACtC,EAAoBgF,KACjD,MAAM7E,EAAOnG,EAAA+K,YAAY/E,EAAOgF,GAC1BkD,EAAWvD,EAAWwC,cAAchH,EAAM6E,GAC1CoD,EAAW,IAAIxD,EAAA3K,QAAW+F,EAAM3F,KAAM6N,EAAS5N,EAAG4N,EAAS3N,EAAGyK,EAAMxK,KAAM,WAAY,MAG5F,OAFAwF,EAAM/E,IAAImN,GAEHjI,IAGInG,EAAAoG,kBAAoB,EAACiI,EAAwBC,EAA0BnI,EAAY6E,EAAkBuD,GAAwB,EAAMC,GAA0B,EAAMC,GAAsB,KACpM,MAAMC,EAA2B/D,EAAWgE,oBAAoBxI,EAAM6E,GAEtE,GAAIyD,EAAe,CACjB,MAAMG,EAAuBjE,EAAWkE,iBAAiB1I,EAAM6E,GACzD8D,EAAkBT,EAAU5C,SAASmD,GAE3C,KAAME,EAAgB3N,OAAS2N,EAAgBzN,SAAWyN,EAAgB1N,QACxE,OAGF,MAAM2N,EAAyBpE,EAAWwC,cAAchH,EAAM6E,GACxDgE,EAAoBV,EAAY7C,SAASwD,KAAMC,GAAOA,EAAG5O,IAAMyO,EAAuBzO,GAAK4O,EAAG3O,IAAMwO,EAAuBxO,GAEjI,GAAIyO,GAAqBA,EAAkB3N,QACzC,OAIJ,GAAImN,EAAmB,CAQrB,MAP0B,IAAME,EAAiBS,UAAWC,IAC1D,MAAMC,EAAQ1E,EAAWkE,iBAAiBO,EAAGpE,GACvCsE,EAAWjB,EAAU5C,SAAS4D,GAEpC,QAASC,EAASnO,OAASmO,EAASjO,SAAWiO,EAASlO,WAIxD,OAIJ,MAAMmO,GAAiBpJ,KAASuI,GAEhC,GAAIH,EAAiB,CAWnB,GAVmBgB,EAAMC,KAAMJ,IAC7B,MAAMlC,EAAQvC,EAAWwC,cAAciC,EAAGpE,GAEpChE,EAAQsH,EAAY7C,SAASwD,KAChCC,GAAmBA,aAAcpE,EAAA7K,SAASiP,EAAG5O,IAAM4M,EAAM5M,GAAK4O,EAAG3O,IAAM2M,EAAM3M,GAGhF,OAAOyG,GAASA,EAAM7F,OAAS6F,EAAM3F,UAIrC,OAIJkO,EAAME,QAAQ,CAACL,EAAS7D,KACtB,MAAM8D,EAAQ1E,EAAWkE,iBAAiBO,EAAGpE,GACvCsE,EAA6BjB,EAAU5C,SAAS4D,GAChDnC,EAAQvC,EAAWwC,cAAciC,EAAGpE,GAEpCX,EAAaiE,EAAY7C,SAASwD,KAAMC,GAAyBA,EAAG5O,IAAM4M,EAAM5M,GAAK4O,EAAG3O,IAAM2M,EAAM3M,GAEtG8J,GAAcA,EAAWlJ,QAC3BkJ,EAAWhJ,SAAU,GAGvBiO,EAASjP,KAAKY,IAAIoG,MAAMiI,GAAUhI,IAAK4B,MAAO,GAAK,IAAK,MAAM,EAAU,GAAJqC,GAAQ/D,WAAWvG,IAAI,KACzFqO,EAASnO,MAAQmO,EAASlO,OAASkO,EAASjO,SAAU,QAK/CrB,EAAAyI,YAAc,EAACzC,EAAoB2F,EAAsB/G,EAAcoG,KAElF,IAAIO,EAAUnC,EAGd,IAAKmC,EAAI,EAAGA,EAAIP,EAAM3F,KAAMkG,IAC1BnC,EAAQjF,EAAA7C,cAAc,EAAGqK,EAAU/E,OAAOhC,GAAO8K,MAAMC,IAAI5O,QAAQ,GACnEiF,EAAM/E,IAAI,IAAIf,OAAOC,WAAW6F,EAAM3F,KAAM2K,EAAMxK,KAAO+K,EAAIP,EAAMxK,KAAM,EAAGwK,EAAMxK,KAAMwK,EAAMxK,KAAM,UAAWmL,EAAU/E,OAAOhC,GAAO8K,MAAMC,IAAIvG,KAYnJ,IAAKmC,EAAI,EAAGA,EAAIP,EAAM5F,KAAO,EAAGmG,IAC9BnC,EAAQjF,EAAA7C,cAAc,EAAGqK,EAAU/E,OAAOhC,GAAO8K,MAAME,KAAK7O,QAAQ,GACpEiF,EAAM/E,IAAI,IAAIf,OAAOC,WAAW6F,EAAM3F,KAAM,EAAG2K,EAAMxK,KAAO+K,EAAGP,EAAMxK,KAAMwK,EAAMxK,KAAM,UAAWmL,EAAU/E,OAAOhC,GAAO8K,MAAME,KAAKxG,KAIvI,IAAKmC,EAAI,EAAGA,EAAIP,EAAM5F,KAAO,EAAGmG,IAC9BnC,EAAQjF,EAAA7C,cAAc,EAAGqK,EAAU/E,OAAOhC,GAAO8K,MAAME,KAAK7O,QAAQ,GACpEiF,EAAM/E,IAAI,IAAIf,OAAOC,WAAW6F,EAAM3F,KAAM2K,EAAM3F,KAAO2F,EAAMxK,KAAOwK,EAAMxK,KAAMwK,EAAMxK,KAAO+K,EAAGP,EAAMxK,KAAMwK,EAAMxK,KAAM,UAAWmL,EAAU/E,OAAOhC,GAAO8K,MAAME,KAAKxG,sFClS5K,MAAMyG,IACHxE,IAAM,EAAGC,KAAM,IACfD,IAAM,EAAGC,IAAM,IACfD,IAAM,EAAGC,IAAM,IACfD,IAAM,EAAGC,KAAM,IACfD,IAAM,EAAGC,IAAM,IACfD,KAAM,EAAGC,KAAM,IACfD,KAAM,EAAGC,IAAM,IACfD,KAAM,EAAGC,IAAM,IAGLtL,EAAAuM,WAAa,CAACvB,GACzBA,EAAM5F,KAAO4F,EAAM3F,MAERrF,EAAA2O,oBAAsB,EAACxI,EAAY6E,KAC9C,MAAM8E,KAWN,OATAD,EAAkBJ,QAASM,IACzB,IAAIC,EAAgB7J,EAAKkF,IAAM0E,EAAO1E,IAClC4E,EAAgB9J,EAAKmF,IAAMyE,EAAOzE,IAElC0E,GAAU,GAAKA,EAAShF,EAAM5F,MAAQ6K,GAAU,GAAKA,EAASjF,EAAM3F,MACtEyK,EAAcI,MAAM7E,IAAK2E,EAAQ1E,IAAK2E,MAInCH,IAGI9P,EAAAmN,cAAgB,EAAChH,EAAY6E,MACxC1K,EAAG6F,EAAKmF,IAAMN,EAAMxK,KAAoB,GAAbwK,EAAMxK,KACjCD,EAAG4F,EAAKkF,IAAML,EAAMxK,KAAoB,GAAbwK,EAAMxK,QAGtBR,EAAA0L,cAAgB,EAACwB,EAAclC,MAC1CK,IAAK6B,EAAM3M,EAAIyK,EAAMxK,KAAO,GAC5B8K,IAAK4B,EAAM5M,EAAI0K,EAAMxK,KAAO,MAGjBR,EAAAmQ,iBAAmB,EAACd,EAAcrE,MAC7CK,IAAK1J,KAAKE,MAAMwN,GAASrE,EAAM5F,KAAO,IACtCkG,IAAK+D,EAAQrE,EAAM3F,QAGRrF,EAAA6O,iBAAmB,EAAC1I,EAAY6E,IAC3C7E,EAAKkF,IAAML,EAAM3F,KAAOc,EAAKmF,KAElBtL,EAAAoQ,aAAe,EAAC7O,EAASC,IACpCD,EAAE8J,MAAQ7J,EAAE6J,KAAO9J,EAAE+J,MAAQ9J,EAAE8J,oFClDjC,MAAAV,EAAA9I,EAAA,GAGA9B,EAAAC,sBAAkC2K,EAAA3K,QAGhCG,YAAYC,EAAkBC,EAAUC,EAAUC,EAAa8E,GAC7D3E,MAAMN,EAAMC,EAAGC,EAAGC,EAAM,QAAS8E,EAAK5E,QACtCE,KAAKyP,OAAS/K,EAGhBA,WACE,OAAO1E,KAAKyP,wFCZhB,MAAAzF,EAAA9I,EAAA,GAGA9B,EAAAC,sBAAmC2K,EAAA3K,QAGjCG,YAAYC,EAAkBC,EAAUC,EAAUC,EAAa8E,GAC7D3E,MAAMN,EAAMC,EAAGC,EAAGC,EAAM,SAAU8E,EAAK5E,QACvCE,KAAKyP,OAAS/K,EAGhBA,WACE,OAAO1E,KAAKyP,wFCZhBrQ,EAAAC,sBAA2CC,OAAO2C,MAChDzC,OAEEQ,KAAKP,KAAKyC,MAAMC,gBAAkB,QAEpC3C,SAEwBQ,KAAKP,KAAKY,IAAI4H,KAA6B,GAAxBjI,KAAKP,KAAKqD,MAAMnB,MAAqC,GAAzB3B,KAAKP,KAAKqD,MAAMlB,OADhE,2DAEnBgC,KAAM,aACNC,KAAM,UACNC,MAAO,WAEK7D,OAAOC,IAAI,GAAI,IAE7BF,KAAKP,KAAK8J,MAAMmG,SAASC,aAAa,KAAM,KAC1C3P,KAAKP,KAAK8J,MAAMmG,SAASE,kBACzB5P,KAAKyB,MAAMC,MAAM","file":"game.js","sourcesContent":["export default class MapElement extends Phaser.TileSprite {\n  constructor(game:Phaser.Game, x:number, y:number, size:number, texture:string, frames:number[]) {\n    super(game, x, y, size, size, texture, frames[0]);\n\n    this.anchor.set(.5, .5);\n\n    if (frames.length > 1) {\n      this.animations.add('idle', frames, 10, true);\n      this.play('idle');\n    }\n  }\n  kill():void {\n    this.alive = this.exists = this.visible = false;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/prefabs/MapElement.ts","export const randomBetween = (a:number, b:number, isInteger:boolean=false):number => {\n  let numBetween:number = a + Math.random() * (b - a);\n\n  if (isInteger) {\n    numBetween = Math.floor(numBetween);\n  }\n\n  return numBetween;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/utils/mathUtils.ts","import 'pixi';\nimport 'p2';\nimport 'phaser';\n\nimport BootState from './states/BootState';\nimport PreloadState from './states/PreloadState';\nimport GameState from './states/GameState';\nimport GameOverState from './states/GameOverState';\n\nclass RPG extends Phaser.Game {\n  constructor(config:Phaser.IGameConfig) {\n    super(config);\n\n    this.state.add('Boot', BootState);\n    this.state.add('Preload', PreloadState);\n    this.state.add('Game', GameState);\n    this.state.add('GameOver', GameOverState);\n\n    this.state.start('Boot');\n  }\n}\n\nconst config:Phaser.IGameConfig = {\n  width: 576,\n  height: 576,\n  renderer: Phaser.AUTO,\n  parent: 'game',\n  resolution: 1\n};\n\nnew RPG(config);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/index.ts","export default class BootState extends Phaser.State {\n  init() {\n    this.game.stage.backgroundColor = '#000';\n    this.scale.scaleMode = Phaser.ScaleManager.NO_SCALE;\n    this.scale.pageAlignHorizontally = true;\n    this.scale.pageAlignVertically = true;\n  }\n  preload() {\n    this.load.image('bar', 'assets/images/preloader-bar.png');\n  }\n  create() {\n    this.state.start('Preload');\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/states/BootState.ts","export default class PreloadState extends Phaser.State {\n  preload() {\n    const preloadBar = this.add.sprite(this.game.world.centerX, this.game.world.centerY, 'bar');\n    preloadBar.anchor.setTo(0.5);\n    preloadBar.scale.setTo(100, 1);\n\n    this.load.setPreloadSprite(preloadBar);\n\n    this.load.spritesheet('heroes', 'assets/images/uf_heroes.png', 48, 48, undefined, 0, 0);\n    this.load.spritesheet('items', 'assets/images/uf_items.png', 48, 48, undefined, 0, 0);\n    this.load.spritesheet('terrain', 'assets/images/uf_terrain.png', 48, 48, undefined, 0, 0);\n\n    this.load.json('gameBaseData', 'assets/data/gameBaseData.json');\n  }\n  create() {\n    this.state.start('Game');\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/states/PreloadState.ts","import {\n  clearDarknessTile,\n  createBackgroundTiles,\n  createDarkTiles, createEnemies, createEntrance, createExit, createItems, createKey, createProps, createWalls,\n  getFreeCell,\n} from '../prefabs/Terrain';\n\nimport {\n  IBoardData, ICell,\n  IGameData, ILevelData,\n  IPlayerStats\n} from '../interfaces';\n\nimport MapElement from '../prefabs/MapElement';\nimport Item from '../prefabs/Item';\nimport Enemy from '../prefabs/Enemy';\nimport {randomBetween} from '../utils/mathUtils';\n\nconst ROWS = 10;\nconst COLS = 10;\n\nconst TILE_SIZE = 48;\n\nconst LABEL_STYLE = {\n  font: '8px Pixel',\n  fill: '#ffffff',\n  align: 'center'\n};\n\nconst defaultGameData:IGameData = {\n  floor: 1,\n  theme: 0,\n  stats: {\n    health: 25,\n    attack: 2,\n    defense: 1,\n    gold: 0,\n    hasKey: false\n  }\n};\n\nexport default class GameState extends Phaser.State {\n\n  protected __playerStats:IPlayerStats;\n\n  protected __currentFloor:number;\n\n  protected __currentTheme:number;\n\n  protected __backgroundTiles:Phaser.Group;\n\n  protected __mapElements:Phaser.Group;\n\n  protected __darkTiles:Phaser.Group;\n\n  protected __walls:Phaser.Group;\n\n  protected __hudMessages:Phaser.Group;\n\n  protected __levelData:ILevelData;\n\n  protected __board:IBoardData = {\n    rows: ROWS,\n    cols: COLS,\n    size: TILE_SIZE\n  };\n\n  private __healthIcon:Phaser.TileSprite;\n  private __healthLabel:Phaser.Text;\n\n  private __attackIcon:Phaser.TileSprite;\n  private __attackLabel:Phaser.Text;\n\n  private __defenseIcon:Phaser.TileSprite;\n  private __defenseLabel:Phaser.Text;\n\n  private __goldIcon:Phaser.TileSprite;\n  private __goldLabel:Phaser.Text;\n\n  private __levelLabel:Phaser.Text;\n\n  private __keyIcon:Phaser.TileSprite;\n\n  init(data:IGameData=defaultGameData) {\n    this.__currentFloor = data.floor;\n    this.__playerStats = { ...data.stats };\n    this.__currentTheme = data.theme;\n  }\n\n  create() {\n    this.__levelData = this.game.cache.getJSON('gameBaseData') as ILevelData;\n\n    this.__backgroundTiles = this.game.add.group();\n    this.__backgroundTiles.x = this.__board.size;\n    this.__backgroundTiles.y = this.__board.size;\n\n    this.__mapElements = this.game.add.group();\n    this.__mapElements.x = this.__board.size;\n    this.__mapElements.y = this.__board.size;\n\n    createBackgroundTiles(this.__backgroundTiles, this.__levelData, this.__currentTheme, this.__board, (cell:ICell):void => {\n      clearDarknessTile(this.__darkTiles, this.__mapElements, cell, this.__board, true);\n    });\n\n    createProps(this.__mapElements, this.__board, this.__levelData, this.__currentTheme);\n\n    createItems(this.__mapElements, this.__board, this.__levelData, (cell:ICell, item:Item) => {\n      clearDarknessTile(this.__darkTiles, this.__mapElements, cell, this.__board, true, false, false);\n\n      this.__playerStats.gold += item.data.gold || 0;\n      this.__playerStats.health += item.data.health || 0;\n      this.__playerStats.attack += item.data.attack || 0;\n      this.__playerStats.defense += item.data.defense || 0;\n\n      this.refreshStats();\n\n      item.kill();\n    });\n\n    createKey(this.__mapElements, this.__levelData.levels[this.__currentTheme].key, this.__board, (cell:ICell, key:MapElement):void => {\n      clearDarknessTile(this.__darkTiles, this.__mapElements, cell, this.__board, true, false);\n\n      this.__playerStats.hasKey = true;\n\n      this.refreshStats();\n\n      key.kill();\n\n      this.showLabel(key, 'You found the key. Find the exit', 1000);\n    });\n\n    createEnemies(this.__mapElements, this.__board, this.__levelData, this.__currentTheme, this.__currentFloor, (cell:ICell, enemy:Enemy):void => {\n      const damage = Math.round(\n        Math.max(0.5, this.__playerStats.attack * Math.random() - enemy.data.defense * Math.random()) * 100\n      ) / 100;\n\n      enemy.data.health -= damage;\n\n      this.showLabel(enemy, damage.toString());\n\n      this.game.add.tween(enemy)\n        .to({ tint: 0xff0000 }, 300, null, true)\n        .onComplete.addOnce(() => {\n          this.game.tweens.removeFrom(enemy);\n\n          enemy.tint = 0xffffff;\n\n          if (enemy.data.health <= 0) {\n            this.__playerStats.gold += enemy.data.gold;\n\n            enemy.kill();\n\n            clearDarknessTile(this.__darkTiles, this.__mapElements, cell, this.__board, true, false, false);\n          } else {\n            const newHealth = this.__playerStats.health - Math.max(0.5, enemy.data.attack * Math.random() - this.__playerStats.defense * Math.random());\n            if (Math.ceil(this.__playerStats.health) > Math.ceil(newHealth)) {\n              this.camera.flash(0xcc0000, 300, false, 0.25);\n              this.camera.onFlashComplete.addOnce(() => {\n                this.__playerStats.health = newHealth;\n              });\n            }\n          }\n\n          this.refreshStats();\n\n          if (this.__playerStats.health <= 0) {\n            this.gameOver();\n          }\n        });\n    });\n\n    createExit(this.__mapElements, this.__levelData.levels[this.__currentTheme].exit, this.__board, (cell:ICell, exit:MapElement) => {\n      if (this.__playerStats.hasKey) {\n        this.nextLevel();\n      } else {\n        this.showLabel(exit, 'You need a key', 1000);\n      }\n    });\n\n    const entranceCell = createEntrance(this.__mapElements, this.__board);\n\n    this.__darkTiles = createDarkTiles(this.game, this.__board);\n    this.__darkTiles.x = this.__board.size;\n    this.__darkTiles.y = this.__board.size;\n\n    clearDarknessTile(this.__darkTiles, this.__mapElements, entranceCell, this.__board, true, false, false);\n\n    this.__walls = this.game.add.group();\n\n    createWalls(this.__walls, this.__levelData, this.__currentTheme, this.__board);\n\n    this.initGui();\n\n    this.refreshStats();\n\n    this.__hudMessages = this.game.add.group();\n    this.__hudMessages.x = this.__board.size;\n    this.__hudMessages.y = this.__board.size;\n  }\n\n  refreshStats():void {\n    this.__healthLabel.text = Math.ceil(this.__playerStats.health).toString();\n    this.__attackLabel.text = Math.ceil(this.__playerStats.attack).toString();\n    this.__defenseLabel.text = Math.ceil(this.__playerStats.defense).toString();\n    this.__goldLabel.text = Math.ceil(this.__playerStats.gold).toString();\n\n    this.__keyIcon.alpha = this.__playerStats.hasKey ? 1.0 : 0.25;\n\n    if (this.__playerStats.health < 5) {\n      this.__healthIcon.frame = 16;\n    } else if (this.__playerStats.health < 15) {\n      this.__healthIcon.frame = 17;\n    } else {\n      this.__healthIcon.frame = 18;\n    }\n  }\n\n  nextLevel():void {\n    this.camera.fade(0x000000);\n    this.camera.onFadeComplete.addOnce(() => {\n      this.game.state.start('Game', true, false, {\n        floor: this.__currentFloor + 1,\n        theme: randomBetween(0, this.__levelData.levels.length, true),\n        stats: { ...this.__playerStats, hasKey: false }\n      });\n    });\n  }\n\n  protected initGui():void {\n    const x = 0;\n    const y = TILE_SIZE * ROWS + TILE_SIZE;\n\n    const bitmapRect = this.add.bitmapData(this.game.width, this.game.height - TILE_SIZE);\n\n    bitmapRect.ctx.fillStyle = '#111111';\n    bitmapRect.ctx.fillRect(0, 0, this.game.width, TILE_SIZE);\n\n    this.add.sprite(0, y, bitmapRect);\n\n    const style = {\n      font: '12px Pixel',\n      fill: '#fff',\n      align: 'left'\n    };\n\n    this.__healthIcon = this.add.tileSprite(x, y, TILE_SIZE, TILE_SIZE, 'items', 18);\n    this.__healthLabel = this.add.text(x + TILE_SIZE, y + 20, '99+', style);\n\n    this.__attackIcon = this.add.tileSprite(x + TILE_SIZE * 2, y, TILE_SIZE, TILE_SIZE, 'items', 44);\n    this.__attackLabel = this.add.text(x + TILE_SIZE * 3, y + 20, '99+', style);\n\n    this.__defenseIcon = this.add.tileSprite(x + TILE_SIZE * 4, y, TILE_SIZE, TILE_SIZE, 'items', 115);\n    this.__defenseLabel = this.add.text(x + TILE_SIZE * 5, y + 20, '99+', style);\n\n    this.__goldIcon = this.add.tileSprite(x + TILE_SIZE * 6, y, TILE_SIZE, TILE_SIZE, 'items', 15);\n    this.__goldLabel = this.add.text(x + TILE_SIZE * 7, y + 20, '999+', style);\n\n    this.__keyIcon = this.add.tileSprite(x + TILE_SIZE * COLS + TILE_SIZE, y, TILE_SIZE, TILE_SIZE, 'items', this.__levelData.levels[this.__currentTheme].key[0]);\n\n    this.__levelLabel = this.add.text(10, 10, `${this.__levelData.levels[this.__currentTheme].name}: floor ${this.__currentFloor}`, {\n      ...style,\n      font: '9px Pixel'\n    });\n  }\n\n  protected gameOver():void {\n    this.game.input.enabled = false;\n    this.camera.fade(0x330000, 300, true, 1);\n    this.camera.onFadeComplete.addOnce(() => {\n      this.game.input.enabled = true;\n      this.game.state.start('GameOver');\n    });\n  }\n\n  protected showLabel(mapElement:MapElement, message:string, duration:number=500):void {\n    const label = new Phaser.Text(this.game, mapElement.x, mapElement.y, message, LABEL_STYLE);\n\n    label.anchor.setTo(.5, .5);\n\n    this.game.add.tween(label)\n      .to({ y: label.y - mapElement.height * .5, alpha: 0.25 }, duration, null, true)\n      .onComplete.addOnce(() => {\n        label.destroy(true);\n      });\n\n    this.__hudMessages.add(label);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/states/GameState.ts","import {IBoardData, ICell, IEnemy, IItem, ILevelData, IPoint, IProp} from '../interfaces';\nimport * as boardUtils from '../utils/boardUtils';\nimport {randomBetween} from '../utils/mathUtils';\nimport MapElement from './MapElement';\nimport Item from './Item';\nimport Enemy from './Enemy';\n\nexport const getFreeCell = (group:Phaser.Group, board:IBoardData):ICell => {\n  let freeCell:ICell, currentCell:ICell, foundCell:boolean;\n  let currentChild:Phaser.TileSprite, row:number, col:number, i:number;\n\n  const len = group.length;\n\n  while (!freeCell) {\n    foundCell = false;\n\n    row = randomBetween(0, board.rows, true);\n    col = randomBetween(0, board.cols, true);\n\n    for (i = 0; i < len; i++) {\n      currentChild = group.children[i] as Phaser.TileSprite;\n      currentCell = boardUtils.getCellFromXY(currentChild, board);\n      if (currentChild && currentChild.alive && currentCell.row === row && currentCell.col === col) {\n        foundCell = true;\n        break;\n      }\n    }\n\n    if (!foundCell) {\n      freeCell = { row, col };\n    }\n  }\n\n  return freeCell;\n};\n\nexport const createBackgroundTiles = (group:Phaser.Group, levelData:ILevelData, theme:number, board:IBoardData, onInput:Function):void => {\n  let frame:number, tile:Phaser.TileSprite;\n\n  const level = levelData.levels[theme];\n\n  for (let i:number = 0; i < board.rows; i++) {\n    for (let j:number = 0; j < board.cols; j++) {\n      frame = randomBetween(0, level.tiles.length, true);\n      tile = new Phaser.TileSprite(group.game, j * board.size, i * board.size, board.size, board.size, 'terrain', level.tiles[frame]);\n      tile.inputEnabled = true;\n      tile.events.onInputDown.add(() => {\n        onInput({ row: i, col: j }, tile);\n      });\n\n      group.add(tile);\n    }\n  }\n};\n\nexport const createDarkTiles = (game:Phaser.Game, board:IBoardData):Phaser.Group => {\n  const group = new Phaser.Group(game);\n\n  let tile:Phaser.TileSprite;\n\n  for (let i:number = 0; i < board.rows; i++) {\n    for (let j:number = 0; j < board.cols; j++) {\n      tile = new Phaser.TileSprite(game, j * board.size, i * board.size, board.size, board.size, 'terrain', 153);\n      tile.alpha = 0.7;\n\n      group.add(tile);\n    }\n  }\n\n  return group;\n};\n\nexport const createProps = (group:Phaser.Group, board:IBoardData, levelData:ILevelData, levelIndex:number):void => {\n  const numCells = boardUtils.countCells(board);\n  const numItems = Math.round(numCells * levelData.coefs.propOccupation * randomBetween(1 - levelData.coefs.propVariation, 1 + levelData.coefs.propVariation));\n\n  const currentLevel = levelData.levels[levelIndex];\n  const props = [ ...levelData.common.props, ...currentLevel.props ];\n\n  let type:number, propData:IProp, prop:MapElement, cell:ICell, point:IPoint;\n\n  for (let i = 0; i < numItems; i++) {\n    type = randomBetween(0, props.length, true);\n\n    propData = props[type];\n\n    cell = getFreeCell(group, board);\n    point = boardUtils.getXYFromCell(cell, board);\n\n    prop = new MapElement(group.game, point.x, point.y, board.size, 'terrain', propData.frames);\n    prop.inputEnabled = false;\n    // prop.visible = false;\n    group.add(prop);\n  }\n};\n\nexport const createItems = (group:Phaser.Group, board:IBoardData, levelData:ILevelData, onCollect:Function):void => {\n  const numCells = boardUtils.countCells(board);\n  const numItems = Math.round(\n    numCells * levelData.coefs.itemOccupation * randomBetween(1 - levelData.coefs.itemVariation, 1 + levelData.coefs.itemVariation)\n  );\n\n  let type:number, itemData:IItem, item:Item, cell:ICell, point:IPoint;\n\n  const createListener = (cell, item) => () => onCollect(cell, item);\n\n  for (let i = 0; i < numItems; i++) {\n    type = randomBetween(0, levelData.items.length, true);\n\n    itemData = levelData.items[type];\n\n    cell = getFreeCell(group, board);\n    point = boardUtils.getXYFromCell(cell, board);\n\n    item = new Item(group.game, point.x, point.y, board.size, itemData);\n    item.visible = false;\n    item.inputEnabled = true;\n    item.events.onInputDown.addOnce(createListener(cell, item));\n\n    group.add(item);\n  }\n};\n\nexport const createEnemies = (group:Phaser.Group, board:IBoardData, levelData:ILevelData, levelIndex:number, floor:number, onAttack:Function):void => {\n  const numCells = boardUtils.countCells(board);\n  const numItems = Math.round(\n    numCells * levelData.coefs.enemyOccupation * randomBetween(1 - levelData.coefs.enemyVariation, 1 + levelData.coefs.enemyVariation)\n  );\n\n  const currentLevel = levelData.levels[levelIndex];\n  let type:number, enemyData:IEnemy, enemy:Enemy, cell:ICell, point:IPoint;\n\n  const createListener = (cell:ICell, enemy:Enemy) => () => onAttack(cell, enemy);\n  const coef = Math.pow(levelData.coefs.levelIncrement, floor);\n  const enemies = [ ...levelData.common.enemies, ...currentLevel.enemies ];\n\n  for (let i = 0; i < numItems; i++) {\n    type = randomBetween(0, enemies.length, true);\n\n    enemyData = enemies[type];\n\n    cell = getFreeCell(group, board);\n    point = boardUtils.getXYFromCell(cell, board);\n\n    enemy = new Enemy(group.game, point.x, point.y, board.size, {\n      ...enemyData,\n      attack: enemyData.attack * coef,\n      defense: enemyData.defense * coef,\n      health: enemyData.health * coef,\n      gold: enemyData.gold * coef\n    });\n    enemy.visible = false;\n    enemy.inputEnabled = true;\n    enemy.events.onInputDown.add(createListener(cell, enemy));\n\n    group.add(enemy);\n  }\n};\n\nexport const createKey = (group:Phaser.Group, frames:number[], board:IBoardData, onCollect:Function):ICell => {\n  const cell:ICell = getFreeCell(group, board);\n  const position:IPoint = boardUtils.getXYFromCell(cell, board);\n  const key = new MapElement(group.game, position.x, position.y, board.size, 'items', frames);\n  key.visible = false;\n  key.inputEnabled = true;\n  key.events.onInputDown.addOnce(() => {\n    onCollect(cell, key);\n  });\n  group.add(key);\n\n  return cell;\n};\n\nexport const createExit = (group:Phaser.Group, frames:number[], board:IBoardData, onExit:Function):ICell => {\n  const cell = getFreeCell(group, board);\n  const position = boardUtils.getXYFromCell(cell, board);\n  const exit = new MapElement(group.game, position.x, position.y, board.size, 'terrain', frames);\n\n  exit.anchor.set(.5, .5);\n  exit.visible = false;\n  exit.inputEnabled = true;\n  exit.events.onInputDown.add(() => {\n    onExit(cell, exit);\n  });\n  group.add(exit);\n\n  return cell;\n};\n\nexport const createEntrance = (group:Phaser.Group, board:IBoardData):ICell => {\n  const cell = getFreeCell(group, board);\n  const position = boardUtils.getXYFromCell(cell, board);\n  const entrance = new MapElement(group.game, position.x, position.y, board.size, 'terrain', [571]);\n  group.add(entrance);\n\n  return cell;\n};\n\nexport const clearDarknessTile = (darkTiles:Phaser.Group, mapElements:Phaser.Group, cell:ICell, board:IBoardData, considerEnemies:boolean=true, considerNeighbors:boolean=true, considerClear:boolean=true) => {\n  const surroundingCells:ICell[] = boardUtils.getSurroundingCells(cell, board);\n\n  if (considerClear) {\n    const currentDarkTileIndex = boardUtils.getIndexFromCell(cell, board);\n    const currentDarkTile = darkTiles.children[currentDarkTileIndex] as Phaser.TileSprite;\n\n    if (!(currentDarkTile.alive && currentDarkTile.visible && currentDarkTile.exists)) {\n      return;\n    }\n\n    const currentMapElementPoint = boardUtils.getXYFromCell(cell, board);\n    const currentMapElement = mapElements.children.find((el) => el.x === currentMapElementPoint.x && el.y === currentMapElementPoint.y);\n\n    if (currentMapElement && currentMapElement.visible) {\n      return;\n    }\n  }\n\n  if (considerNeighbors) {\n    const hasClearNeighbor = -1 !== surroundingCells.findIndex((c:ICell) => {\n      const index = boardUtils.getIndexFromCell(c, board);\n      const darkTile = darkTiles.children[index] as Phaser.TileSprite;\n\n      return !(darkTile.alive && darkTile.visible && darkTile.exists);// TODO Refactor\n    });\n\n    if (!hasClearNeighbor) {\n      return;\n    }\n  }\n\n  const cells:ICell[] = [cell, ...surroundingCells];\n\n  if (considerEnemies) {\n    const hasMonster = cells.some((c:ICell) => {\n      const point = boardUtils.getXYFromCell(c, board);\n\n      const enemy = mapElements.children.find(\n        (el:MapElement) => (el instanceof Enemy && el.x === point.x && el.y === point.y)\n      ) as Enemy;\n\n      return enemy && enemy.alive && enemy.visible;\n    });\n\n    if (hasMonster) {\n      return;\n    }\n  }\n\n  cells.forEach((c:ICell, i:number) => {\n    const index = boardUtils.getIndexFromCell(c, board);\n    const darkTile:Phaser.TileSprite = darkTiles.children[index] as Phaser.TileSprite;\n    const point = boardUtils.getXYFromCell(c, board);\n\n    const mapElement = mapElements.children.find((el:Phaser.TileSprite) => el.x === point.x && el.y === point.y) as MapElement;\n\n    if (mapElement && mapElement.alive) {\n      mapElement.visible = true;\n    }\n\n    darkTile.game.add.tween(darkTile).to({ alpha: 0 }, 150, null, true, i * 25).onComplete.add(() => {\n      darkTile.alive = darkTile.exists = darkTile.visible = false;\n    });\n  });\n};\n\nexport const createWalls = (group:Phaser.Group, levelData:ILevelData, theme:number, board:IBoardData):void => {\n  // create top walls;\n  let i:number, frame:number;\n\n  // top walls\n  for (i = 0; i < board.cols; i++) {\n    frame = randomBetween(0, levelData.levels[theme].walls.top.length, true);\n    group.add(new Phaser.TileSprite(group.game, board.size * i + board.size, 0, board.size, board.size, 'terrain', levelData.levels[theme].walls.top[frame]));\n  }\n\n  // bottom walls\n  /*\n  for (i = 0; i < board.cols; i++) {\n    frame = randomBetween(0, levelData.levels[theme].walls.bottom.length, true);\n    group.add(new Phaser.TileSprite(group.game, board.size * i + board.size, board.rows * board.size - 1, board.size, board.size, 'terrain', levelData.levels[theme].walls.bottom[frame]));\n  }\n  */\n\n  // left walls\n  for (i = 0; i < board.rows + 1; i++) {\n    frame = randomBetween(0, levelData.levels[theme].walls.side.length, true);\n    group.add(new Phaser.TileSprite(group.game, 0, board.size * i, board.size, board.size, 'terrain', levelData.levels[theme].walls.side[frame]));\n  }\n\n  // right walls\n  for (i = 0; i < board.rows + 1; i++) {\n    frame = randomBetween(0, levelData.levels[theme].walls.side.length, true);\n    group.add(new Phaser.TileSprite(group.game, board.cols * board.size + board.size, board.size * i, board.size, board.size, 'terrain', levelData.levels[theme].walls.side[frame]));\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/prefabs/Terrain.ts","import {IBoardData, ICell, IPoint} from '../interfaces';\n\nconst relativePositions = [\n  {row:  1, col: -1},\n  {row:  1, col:  0},\n  {row:  1, col:  1},\n  {row:  0, col: -1},\n  {row:  0, col:  1},\n  {row: -1, col: -1},\n  {row: -1, col:  0},\n  {row: -1, col:  1}\n];\n\nexport const countCells = (board:IBoardData):number =>\n  board.rows * board.cols;\n\nexport const getSurroundingCells = (cell:ICell, board:IBoardData):ICell[] => {\n  const adjacentTiles:ICell[] = [];\n\n  relativePositions.forEach((relPos:ICell):void => {\n    let relRow:number = cell.row + relPos.row;\n    let relCol:number = cell.col + relPos.col;\n\n    if (relRow >= 0 && relRow < board.rows && relCol >= 0 && relCol < board.cols) {\n      adjacentTiles.push({row: relRow, col: relCol});\n    }\n  });\n\n  return adjacentTiles;\n};\n\nexport const getXYFromCell = (cell:ICell, board:IBoardData):IPoint => ({\n  x: cell.col * board.size + board.size * .5,\n  y: cell.row * board.size + board.size * .5\n});\n\nexport const getCellFromXY = (point:IPoint, board:IBoardData):ICell => ({\n  row: point.y / board.size - .5,\n  col: point.x / board.size - .5\n});\n\nexport const getCellFromIndex = (index:number, board:IBoardData):ICell => ({\n  row: Math.floor(index / (board.rows - 1)),\n  col: index % board.cols\n});\n\nexport const getIndexFromCell = (cell:ICell, board:IBoardData):number =>\n  cell.row * board.cols + cell.col;\n\nexport const compareCells = (a:ICell, b:ICell):boolean =>\n  a.row === b.row && a.col === b.col;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/utils/boardUtils.ts","import MapElement from './MapElement';\nimport {IItem} from '../interfaces';\n\nexport default class Item extends MapElement {\n  protected __data:IItem;\n\n  constructor(game:Phaser.Game, x:number, y:number, size:number, data:IItem) {\n    super(game, x, y, size, 'items', data.frames);\n    this.__data = data;\n  }\n\n  get data():IItem {\n    return this.__data;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/prefabs/Item.ts","import MapElement from './MapElement';\nimport {IEnemy} from '../interfaces';\n\nexport default class Enemy extends MapElement {\n  protected __data:IEnemy;\n\n  constructor(game:Phaser.Game, x:number, y:number, size:number, data:IEnemy) {\n    super(game, x, y, size, 'heroes', data.frames);\n    this.__data = data;\n  }\n\n  get data():IEnemy {\n    return this.__data;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/prefabs/Enemy.ts","export default class GameOverState extends Phaser.State {\n  init() {\n    // Pass user score here\n    this.game.stage.backgroundColor = 0x330000;\n  }\n  create() {\n    const gameOverText = `Congratulations!\\nYou died.\\n\\nPress any key to restart`;\n    const gameOverLabel = this.game.add.text(this.game.world.width * .5, this.game.world.height * .5, gameOverText, {\n      font: '16px Pixel',\n      fill: '#ffffff',\n      align: 'center'\n    });\n    gameOverLabel.anchor.set(.5, .5);\n\n    this.game.input.keyboard.addCallbacks(null, () => {\n      this.game.input.keyboard.removeCallbacks();\n      this.state.start('Game');\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/states/GameOverState.ts"],"sourceRoot":""}