{"version":3,"sources":["webpack:///./src/prefabs/MapElement.ts","webpack:///./src/utils/mathUtils.ts","webpack:///./src/index.ts","webpack:///./src/states/BootState.ts","webpack:///./src/states/PreloadState.ts","webpack:///./src/states/GameState.ts","webpack:///./src/prefabs/Terrain.ts","webpack:///./src/utils/boardUtils.ts","webpack:///./src/prefabs/Item.ts","webpack:///./src/prefabs/Enemy.ts","webpack:///./src/states/GameOverState.ts"],"names":["exports","default","Phaser","TileSprite","[object Object]","game","x","y","size","texture","frames","super","this","anchor","set","length","animations","add","play","alive","exists","visible","randomBetween","a","b","isInteger","numBetween","Math","random","floor","__webpack_require__","BootState_1","PreloadState_1","GameState_1","GameOverState_1","Game","config","state","start","width","height","renderer","AUTO","parent","resolution","State","stage","backgroundColor","scale","scaleMode","ScaleManager","NO_SCALE","pageAlignHorizontally","pageAlignVertically","load","image","preloadBar","sprite","world","centerX","centerY","setTo","setPreloadSprite","spritesheet","undefined","json","Terrain_1","mathUtils_1","ROWS","COLS","TILE_SIZE","defaultGameData","theme","stats","health","attack","defense","gold","hasKey","__board","rows","cols","data","__currentFloor","__playerStats","Object","assign","__currentTheme","__levelData","cache","getJSON","__backgroundTiles","group","__mapElements","createBackgroundTiles","cell","clearDarknessTile","__darkTiles","createProps","createItems","item","refreshStats","kill","createKey","levels","key","createEnemies","enemy","max","tween","to","tint","onComplete","addOnce","tweens","removeFrom","newHealth","ceil","camera","flash","onFlashComplete","gameOver","createExit","exit","nextLevel","entranceCell","createEntrance","createDarkTiles","__walls","createWalls","initGui","__healthLabel","text","toString","__attackLabel","__defenseLabel","__goldLabel","__keyIcon","alpha","__healthIcon","frame","fade","onFadeComplete","bitmapRect","bitmapData","ctx","fillStyle","fillRect","style","font","fill","align","tileSprite","__attackIcon","__defenseIcon","__goldIcon","__levelLabel","name","input","enabled","boardUtils","MapElement_1","Item_1","Enemy_1","getFreeCell","board","freeCell","currentCell","foundCell","currentChild","row","col","i","len","children","getCellFromXY","levelData","onInput","tile","level","j","tiles","inputEnabled","events","onInputDown","Group","levelIndex","numCells","countCells","numItems","round","coefs","propOccupation","propVariation","currentLevel","props","common","type","propData","prop","point","getXYFromCell","onCollect","itemOccupation","itemVariation","itemData","createListener","items","onAttack","enemyOccupation","enemyVariation","enemyData","coef","pow","levelIncrement","enemies","position","onExit","entrance","darkTiles","mapElements","considerEnemies","considerNeighbors","considerClear","surroundingCells","getSurroundingCells","currentDarkTileIndex","getIndexFromCell","currentDarkTile","currentMapElementPoint","currentMapElement","find","el","findIndex","c","index","darkTile","cells","some","forEach","mapElement","walls","top","side","relativePositions","adjacentTiles","relPos","relRow","relCol","push","getCellFromIndex","compareCells","__data","keyboard","addCallbacks","removeCallbacks"],"mappings":"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","file":"game.js","sourcesContent":["export default class MapElement extends Phaser.TileSprite {\n  constructor(game:Phaser.Game, x:number, y:number, size:number, texture:string, frames:number[]) {\n    super(game, x, y, size, size, texture, frames[0]);\n\n    this.anchor.set(.5, .5);\n\n    if (frames.length > 1) {\n      this.animations.add('idle', frames, 10, true);\n      this.play('idle');\n    }\n  }\n  kill():void {\n    this.alive = this.exists = this.visible = false;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/prefabs/MapElement.ts","export const randomBetween = (a:number, b:number, isInteger:boolean=false):number => {\n  let numBetween:number = a + Math.random() * (b - a);\n\n  if (isInteger) {\n    numBetween = Math.floor(numBetween);\n  }\n\n  return numBetween;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/utils/mathUtils.ts","import 'pixi';\nimport 'p2';\nimport 'phaser';\n\nimport BootState from './states/BootState';\nimport PreloadState from './states/PreloadState';\nimport GameState from './states/GameState';\nimport GameOverState from './states/GameOverState';\n\nclass RPG extends Phaser.Game {\n  constructor(config:Phaser.IGameConfig) {\n    super(config);\n\n    this.state.add('Boot', BootState);\n    this.state.add('Preload', PreloadState);\n    this.state.add('Game', GameState);\n    this.state.add('GameOver', GameOverState);\n\n    this.state.start('Boot');\n  }\n}\n\nconst config:Phaser.IGameConfig = {\n  width: 576,\n  height: 576,\n  renderer: Phaser.AUTO,\n  parent: 'game',\n  resolution: 1\n};\n\nnew RPG(config);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/index.ts","export default class BootState extends Phaser.State {\n  init() {\n    this.game.stage.backgroundColor = '#000';\n    this.scale.scaleMode = Phaser.ScaleManager.NO_SCALE;\n    this.scale.pageAlignHorizontally = true;\n    this.scale.pageAlignVertically = true;\n  }\n  preload() {\n    this.load.image('bar', 'assets/images/preloader-bar.png');\n  }\n  create() {\n    this.state.start('Preload');\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/states/BootState.ts","export default class PreloadState extends Phaser.State {\n  preload() {\n    const preloadBar = this.add.sprite(this.game.world.centerX, this.game.world.centerY, 'bar');\n    preloadBar.anchor.setTo(0.5);\n    preloadBar.scale.setTo(100, 1);\n\n    this.load.setPreloadSprite(preloadBar);\n\n    this.load.spritesheet('heroes', 'assets/images/uf_heroes.png', 48, 48, undefined, 0, 0);\n    this.load.spritesheet('items', 'assets/images/uf_items.png', 48, 48, undefined, 0, 0);\n    this.load.spritesheet('terrain', 'assets/images/uf_terrain.png', 48, 48, undefined, 0, 0);\n\n    this.load.json('gameBaseData', 'assets/data/gameBaseData.json');\n  }\n  create() {\n    this.state.start('Game');\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/states/PreloadState.ts","import {\n  clearDarknessTile,\n  createBackgroundTiles,\n  createDarkTiles, createEnemies, createEntrance, createExit, createItems, createKey, createProps, createWalls,\n  getFreeCell,\n} from '../prefabs/Terrain';\n\nimport {\n  IBoardData, ICell,\n  IGameData, ILevelData,\n  IPlayerStats\n} from '../interfaces';\n\nimport MapElement from '../prefabs/MapElement';\nimport Item from '../prefabs/Item';\nimport Enemy from '../prefabs/Enemy';\nimport {randomBetween} from '../utils/mathUtils';\n\nconst ROWS = 10;\nconst COLS = 10;\n\nconst TILE_SIZE = 48;\n\nconst defaultGameData:IGameData = {\n  floor: 1,\n  theme: 0,\n  stats: {\n    health: 25,\n    attack: 2,\n    defense: 1,\n    gold: 0,\n    hasKey: false\n  }\n};\n\nexport default class GameState extends Phaser.State {\n\n  protected __playerStats:IPlayerStats;\n\n  protected __currentFloor:number;\n\n  protected __currentTheme:number;\n\n  protected __backgroundTiles:Phaser.Group;\n\n  protected __mapElements:Phaser.Group;\n\n  protected __darkTiles:Phaser.Group;\n\n  protected __walls:Phaser.Group;\n\n  protected __levelData:ILevelData;\n\n  protected __board:IBoardData = {\n    rows: ROWS,\n    cols: COLS,\n    size: TILE_SIZE\n  };\n\n  private __healthIcon:Phaser.TileSprite;\n  private __healthLabel:Phaser.Text;\n\n  private __attackIcon:Phaser.TileSprite;\n  private __attackLabel:Phaser.Text;\n\n  private __defenseIcon:Phaser.TileSprite;\n  private __defenseLabel:Phaser.Text;\n\n  private __goldIcon:Phaser.TileSprite;\n  private __goldLabel:Phaser.Text;\n\n  private __levelLabel:Phaser.Text;\n\n  private __keyIcon:Phaser.TileSprite;\n\n  init(data:IGameData=defaultGameData) {\n    this.__currentFloor = data.floor;\n    this.__playerStats = { ...data.stats };\n    this.__currentTheme = data.theme;\n  }\n\n  create() {\n    this.__levelData = this.game.cache.getJSON('gameBaseData') as ILevelData;\n\n    this.__backgroundTiles = this.game.add.group();\n    this.__backgroundTiles.x = this.__board.size;\n    this.__backgroundTiles.y = this.__board.size;\n\n    this.__mapElements = this.game.add.group();\n    this.__mapElements.x = this.__board.size;\n    this.__mapElements.y = this.__board.size;\n\n    createBackgroundTiles(this.__backgroundTiles, this.__levelData, this.__currentTheme, this.__board, (cell:ICell):void => {\n      clearDarknessTile(this.__darkTiles, this.__mapElements, cell, this.__board, true);\n    });\n\n    createProps(this.__mapElements, this.__board, this.__levelData, this.__currentTheme);\n\n    createItems(this.__mapElements, this.__board, this.__levelData, (cell:ICell, item:Item) => {\n      clearDarknessTile(this.__darkTiles, this.__mapElements, cell, this.__board, true, false, false);\n\n      this.__playerStats.gold += item.data.gold || 0;\n      this.__playerStats.health += item.data.health || 0;\n      this.__playerStats.attack += item.data.attack || 0;\n      this.__playerStats.defense += item.data.defense || 0;\n\n      this.refreshStats();\n\n      item.kill();\n    });\n\n    createKey(this.__mapElements, this.__levelData.levels[this.__currentTheme].key, this.__board, (cell:ICell, key:MapElement):void => {\n      clearDarknessTile(this.__darkTiles, this.__mapElements, cell, this.__board, true, false);\n\n      this.__playerStats.hasKey = true;\n\n      this.refreshStats();\n\n      key.kill();\n    });\n\n    createEnemies(this.__mapElements, this.__board, this.__levelData, this.__currentTheme, this.__currentFloor, (cell:ICell, enemy:Enemy):void => {\n      enemy.data.health -= Math.max(0.5, this.__playerStats.attack * Math.random() - enemy.data.defense * Math.random());\n\n      this.game.add.tween(enemy)\n        .to({ tint: 0xff0000 }, 300, null, true)\n        .onComplete.addOnce(() => {\n          this.game.tweens.removeFrom(enemy);\n\n          enemy.tint = 0xffffff;\n\n          if (enemy.data.health <= 0) {\n            this.__playerStats.gold += enemy.data.gold;\n\n            enemy.kill();\n\n            clearDarknessTile(this.__darkTiles, this.__mapElements, cell, this.__board, true, false, false);\n          } else {\n            const newHealth = this.__playerStats.health - Math.max(0.5, enemy.data.attack * Math.random() - this.__playerStats.defense * Math.random());\n            if (Math.ceil(this.__playerStats.health) > Math.ceil(newHealth)) {\n              this.camera.flash(0xcc0000, 300, false, 0.25);\n              this.camera.onFlashComplete.addOnce(() => {\n                this.__playerStats.health = newHealth;\n              });\n            }\n          }\n\n          this.refreshStats();\n\n          if (this.__playerStats.health <= 0) {\n            this.gameOver();\n          }\n        });\n    });\n\n    createExit(this.__mapElements, this.__levelData.levels[this.__currentTheme].exit, this.__board, (cell:ICell, exit:MapElement) => {\n      if (this.__playerStats.hasKey) {\n        this.nextLevel();\n      }\n    });\n\n    const entranceCell = createEntrance(this.__mapElements, this.__board);\n\n    this.__darkTiles = createDarkTiles(this.game, this.__board);\n    this.__darkTiles.x = this.__board.size;\n    this.__darkTiles.y = this.__board.size;\n\n    clearDarknessTile(this.__darkTiles, this.__mapElements, entranceCell, this.__board, true, false, false);\n\n    this.__walls = this.game.add.group();\n\n    createWalls(this.__walls, this.__levelData, this.__currentTheme, this.__board);\n\n    this.initGui();\n\n    this.refreshStats();\n  }\n\n  refreshStats():void {\n    this.__healthLabel.text = Math.ceil(this.__playerStats.health).toString();\n    this.__attackLabel.text = Math.ceil(this.__playerStats.attack).toString();\n    this.__defenseLabel.text = Math.ceil(this.__playerStats.defense).toString();\n    this.__goldLabel.text = Math.ceil(this.__playerStats.gold).toString();\n\n    this.__keyIcon.alpha = this.__playerStats.hasKey ? 1.0 : 0.25;\n\n    if (this.__playerStats.health < 5) {\n      this.__healthIcon.frame = 16;\n    } else if (this.__playerStats.health < 15) {\n      this.__healthIcon.frame = 17;\n    } else {\n      this.__healthIcon.frame = 18;\n    }\n  }\n\n  nextLevel():void {\n    this.camera.fade(0x000000);\n    this.camera.onFadeComplete.addOnce(() => {\n      this.game.state.start('Game', true, false, {\n        floor: this.__currentFloor + 1,\n        theme: randomBetween(0, this.__levelData.levels.length, true),\n        stats: { ...this.__playerStats, hasKey: false }\n      });\n    });\n  }\n\n  protected initGui():void {\n    const x = 0;\n    const y = TILE_SIZE * ROWS + TILE_SIZE;\n\n    const bitmapRect = this.add.bitmapData(this.game.width, this.game.height - TILE_SIZE);\n\n    bitmapRect.ctx.fillStyle = '#111111';\n    bitmapRect.ctx.fillRect(0, 0, this.game.width, TILE_SIZE);\n\n    this.add.sprite(0, y, bitmapRect);\n\n    const style = {\n      font: '12px Pixel',\n      fill: '#fff',\n      align: 'left'\n    };\n\n    this.__healthIcon = this.add.tileSprite(x, y, TILE_SIZE, TILE_SIZE, 'items', 18);\n    this.__healthLabel = this.add.text(x + TILE_SIZE, y + 20, '99+', style);\n\n    this.__attackIcon = this.add.tileSprite(x + TILE_SIZE * 2, y, TILE_SIZE, TILE_SIZE, 'items', 44);\n    this.__attackLabel = this.add.text(x + TILE_SIZE * 3, y + 20, '99+', style);\n\n    this.__defenseIcon = this.add.tileSprite(x + TILE_SIZE * 4, y, TILE_SIZE, TILE_SIZE, 'items', 115);\n    this.__defenseLabel = this.add.text(x + TILE_SIZE * 5, y + 20, '99+', style);\n\n    this.__goldIcon = this.add.tileSprite(x + TILE_SIZE * 6, y, TILE_SIZE, TILE_SIZE, 'items', 15);\n    this.__goldLabel = this.add.text(x + TILE_SIZE * 7, y + 20, '999+', style);\n\n    this.__keyIcon = this.add.tileSprite(x + TILE_SIZE * COLS + TILE_SIZE, y, TILE_SIZE, TILE_SIZE, 'items', this.__levelData.levels[this.__currentTheme].key[0]);\n\n    this.__levelLabel = this.add.text(10, 10, `${this.__levelData.levels[this.__currentTheme].name}: floor ${this.__currentFloor}`, {\n      ...style,\n      font: '9px Pixel'\n    });\n  }\n\n  protected gameOver():void {\n    this.game.input.enabled = false;\n    this.camera.fade(0x330000, 300, true, 1);\n    this.camera.onFadeComplete.addOnce(() => {\n      this.game.input.enabled = true;\n      this.game.state.start('GameOver');\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/states/GameState.ts","import {IBoardData, ICell, IEnemy, IItem, ILevelData, IPoint, IProp} from '../interfaces';\nimport * as boardUtils from '../utils/boardUtils';\nimport {randomBetween} from '../utils/mathUtils';\nimport MapElement from './MapElement';\nimport Item from './Item';\nimport Enemy from './Enemy';\n\nexport const getFreeCell = (group:Phaser.Group, board:IBoardData):ICell => {\n  let freeCell:ICell, currentCell:ICell, foundCell:boolean;\n  let currentChild:Phaser.TileSprite, row:number, col:number, i:number;\n\n  const len = group.length;\n\n  while (!freeCell) {\n    foundCell = false;\n\n    row = randomBetween(0, board.rows, true);\n    col = randomBetween(0, board.cols, true);\n\n    for (i = 0; i < len; i++) {\n      currentChild = group.children[i] as Phaser.TileSprite;\n      currentCell = boardUtils.getCellFromXY(currentChild, board);\n      if (currentChild && currentChild.alive && currentCell.row === row && currentCell.col === col) {\n        foundCell = true;\n        break;\n      }\n    }\n\n    if (!foundCell) {\n      freeCell = { row, col };\n    }\n  }\n\n  return freeCell;\n};\n\nexport const createBackgroundTiles = (group:Phaser.Group, levelData:ILevelData, theme:number, board:IBoardData, onInput:Function):void => {\n  let frame:number, tile:Phaser.TileSprite;\n\n  const level = levelData.levels[theme];\n\n  for (let i:number = 0; i < board.rows; i++) {\n    for (let j:number = 0; j < board.cols; j++) {\n      frame = randomBetween(0, level.tiles.length, true);\n      tile = new Phaser.TileSprite(group.game, j * board.size, i * board.size, board.size, board.size, 'terrain', level.tiles[frame]);\n      tile.inputEnabled = true;\n      tile.events.onInputDown.add(() => {\n        onInput({ row: i, col: j }, tile);\n      });\n\n      group.add(tile);\n    }\n  }\n};\n\nexport const createDarkTiles = (game:Phaser.Game, board:IBoardData):Phaser.Group => {\n  const group = new Phaser.Group(game);\n\n  let tile:Phaser.TileSprite;\n\n  for (let i:number = 0; i < board.rows; i++) {\n    for (let j:number = 0; j < board.cols; j++) {\n      tile = new Phaser.TileSprite(game, j * board.size, i * board.size, board.size, board.size, 'terrain', 153);\n      tile.alpha = 0.7;\n\n      group.add(tile);\n    }\n  }\n\n  return group;\n};\n\nexport const createProps = (group:Phaser.Group, board:IBoardData, levelData:ILevelData, levelIndex:number):void => {\n  const numCells = boardUtils.countCells(board);\n  const numItems = Math.round(numCells * levelData.coefs.propOccupation * randomBetween(1 - levelData.coefs.propVariation, 1 + levelData.coefs.propVariation));\n\n  const currentLevel = levelData.levels[levelIndex];\n  const props = [ ...levelData.common.props, ...currentLevel.props ];\n\n  let type:number, propData:IProp, prop:MapElement, cell:ICell, point:IPoint;\n\n  for (let i = 0; i < numItems; i++) {\n    type = randomBetween(0, props.length, true);\n\n    propData = props[type];\n\n    cell = getFreeCell(group, board);\n    point = boardUtils.getXYFromCell(cell, board);\n\n    prop = new MapElement(group.game, point.x, point.y, board.size, 'terrain', propData.frames);\n    prop.inputEnabled = false;\n    // prop.visible = false;\n    group.add(prop);\n  }\n};\n\nexport const createItems = (group:Phaser.Group, board:IBoardData, levelData:ILevelData, onCollect:Function):void => {\n  const numCells = boardUtils.countCells(board);\n  const numItems = Math.round(\n    numCells * levelData.coefs.itemOccupation * randomBetween(1 - levelData.coefs.itemVariation, 1 + levelData.coefs.itemVariation)\n  );\n\n  let type:number, itemData:IItem, item:Item, cell:ICell, point:IPoint;\n\n  const createListener = (cell, item) => () => onCollect(cell, item);\n\n  for (let i = 0; i < numItems; i++) {\n    type = randomBetween(0, levelData.items.length, true);\n\n    itemData = levelData.items[type];\n\n    cell = getFreeCell(group, board);\n    point = boardUtils.getXYFromCell(cell, board);\n\n    item = new Item(group.game, point.x, point.y, board.size, itemData);\n    item.visible = false;\n    item.inputEnabled = true;\n    item.events.onInputDown.addOnce(createListener(cell, item));\n\n    group.add(item);\n  }\n};\n\nexport const createEnemies = (group:Phaser.Group, board:IBoardData, levelData:ILevelData, levelIndex:number, floor:number, onAttack:Function):void => {\n  const numCells = boardUtils.countCells(board);\n  const numItems = Math.round(\n    numCells * levelData.coefs.enemyOccupation * randomBetween(1 - levelData.coefs.enemyVariation, 1 + levelData.coefs.enemyVariation)\n  );\n\n  const currentLevel = levelData.levels[levelIndex];\n  let type:number, enemyData:IEnemy, enemy:Enemy, cell:ICell, point:IPoint;\n\n  const createListener = (cell:ICell, enemy:Enemy) => () => onAttack(cell, enemy);\n  const coef = Math.pow(levelData.coefs.levelIncrement, floor);\n  const enemies = [ ...levelData.common.enemies, ...currentLevel.enemies ];\n\n  for (let i = 0; i < numItems; i++) {\n    type = randomBetween(0, enemies.length, true);\n\n    enemyData = enemies[type];\n\n    cell = getFreeCell(group, board);\n    point = boardUtils.getXYFromCell(cell, board);\n\n    enemy = new Enemy(group.game, point.x, point.y, board.size, {\n      ...enemyData,\n      attack: enemyData.attack * coef,\n      defense: enemyData.defense * coef,\n      health: enemyData.health * coef,\n      gold: enemyData.gold * coef\n    });\n    enemy.visible = false;\n    enemy.inputEnabled = true;\n    enemy.events.onInputDown.add(createListener(cell, enemy));\n\n    group.add(enemy);\n  }\n};\n\nexport const createKey = (group:Phaser.Group, frames:number[], board:IBoardData, onCollect:Function):ICell => {\n  const cell:ICell = getFreeCell(group, board);\n  const position:IPoint = boardUtils.getXYFromCell(cell, board);\n  const key = new MapElement(group.game, position.x, position.y, board.size, 'items', frames);\n  key.visible = false;\n  key.inputEnabled = true;\n  key.events.onInputDown.addOnce(() => {\n    onCollect(cell, key);\n  });\n  group.add(key);\n\n  return cell;\n};\n\nexport const createExit = (group:Phaser.Group, frames:number[], board:IBoardData, onExit:Function):ICell => {\n  const cell = getFreeCell(group, board);\n  const position = boardUtils.getXYFromCell(cell, board);\n  const exit = new MapElement(group.game, position.x, position.y, board.size, 'terrain', frames);\n\n  exit.anchor.set(.5, .5);\n  exit.visible = false;\n  exit.inputEnabled = true;\n  exit.events.onInputDown.add(() => {\n    onExit(cell, exit);\n  });\n  group.add(exit);\n\n  return cell;\n};\n\nexport const createEntrance = (group:Phaser.Group, board:IBoardData):ICell => {\n  const cell = getFreeCell(group, board);\n  const position = boardUtils.getXYFromCell(cell, board);\n  const entrance = new MapElement(group.game, position.x, position.y, board.size, 'terrain', [571]);\n  group.add(entrance);\n\n  return cell;\n};\n\nexport const clearDarknessTile = (darkTiles:Phaser.Group, mapElements:Phaser.Group, cell:ICell, board:IBoardData, considerEnemies:boolean=true, considerNeighbors:boolean=true, considerClear:boolean=true) => {\n  const surroundingCells:ICell[] = boardUtils.getSurroundingCells(cell, board);\n\n  if (considerClear) {\n    const currentDarkTileIndex = boardUtils.getIndexFromCell(cell, board);\n    const currentDarkTile = darkTiles.children[currentDarkTileIndex] as Phaser.TileSprite;\n\n    if (!(currentDarkTile.alive && currentDarkTile.visible && currentDarkTile.exists)) {\n      return;\n    }\n\n    const currentMapElementPoint = boardUtils.getXYFromCell(cell, board);\n    const currentMapElement = mapElements.children.find((el) => el.x === currentMapElementPoint.x && el.y === currentMapElementPoint.y);\n\n    if (currentMapElement && currentMapElement.visible) {\n      return;\n    }\n  }\n\n  if (considerNeighbors) {\n    const hasClearNeighbor = -1 !== surroundingCells.findIndex((c:ICell) => {\n      const index = boardUtils.getIndexFromCell(c, board);\n      const darkTile = darkTiles.children[index] as Phaser.TileSprite;\n\n      return !(darkTile.alive && darkTile.visible && darkTile.exists);// TODO Refactor\n    });\n\n    if (!hasClearNeighbor) {\n      return;\n    }\n  }\n\n  const cells:ICell[] = [cell, ...surroundingCells];\n\n  if (considerEnemies) {\n    const hasMonster = cells.some((c:ICell) => {\n      const point = boardUtils.getXYFromCell(c, board);\n\n      const enemy = mapElements.children.find(\n        (el:MapElement) => (el instanceof Enemy && el.x === point.x && el.y === point.y)\n      ) as Enemy;\n\n      return enemy && enemy.alive && enemy.visible;\n    });\n\n    if (hasMonster) {\n      return;\n    }\n  }\n\n  cells.forEach((c:ICell, i:number) => {\n    const index = boardUtils.getIndexFromCell(c, board);\n    const darkTile:Phaser.TileSprite = darkTiles.children[index] as Phaser.TileSprite;\n    const point = boardUtils.getXYFromCell(c, board);\n\n    const mapElement = mapElements.children.find((el:Phaser.TileSprite) => el.x === point.x && el.y === point.y) as MapElement;\n\n    if (mapElement && mapElement.alive) {\n      mapElement.visible = true;\n    }\n\n    darkTile.game.add.tween(darkTile).to({ alpha: 0 }, 150, null, true, i * 25).onComplete.add(() => {\n      darkTile.alive = darkTile.exists = darkTile.visible = false;\n    });\n  });\n};\n\nexport const createWalls = (group:Phaser.Group, levelData:ILevelData, theme:number, board:IBoardData):void => {\n  // create top walls;\n  let i:number, frame:number;\n\n  // top walls\n  for (i = 0; i < board.cols; i++) {\n    frame = randomBetween(0, levelData.levels[theme].walls.top.length, true);\n    group.add(new Phaser.TileSprite(group.game, board.size * i + board.size, 0, board.size, board.size, 'terrain', levelData.levels[theme].walls.top[frame]));\n  }\n\n  // bottom walls\n  /*\n  for (i = 0; i < board.cols; i++) {\n    frame = randomBetween(0, levelData.levels[theme].walls.bottom.length, true);\n    group.add(new Phaser.TileSprite(group.game, board.size * i + board.size, board.rows * board.size - 1, board.size, board.size, 'terrain', levelData.levels[theme].walls.bottom[frame]));\n  }\n  */\n\n  // left walls\n  for (i = 0; i < board.rows + 1; i++) {\n    frame = randomBetween(0, levelData.levels[theme].walls.side.length, true);\n    group.add(new Phaser.TileSprite(group.game, 0, board.size * i, board.size, board.size, 'terrain', levelData.levels[theme].walls.side[frame]));\n  }\n\n  // right walls\n  for (i = 0; i < board.rows + 1; i++) {\n    frame = randomBetween(0, levelData.levels[theme].walls.side.length, true);\n    group.add(new Phaser.TileSprite(group.game, board.cols * board.size + board.size, board.size * i, board.size, board.size, 'terrain', levelData.levels[theme].walls.side[frame]));\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/prefabs/Terrain.ts","import {IBoardData, ICell, IPoint} from '../interfaces';\n\nconst relativePositions = [\n  {row:  1, col: -1},\n  {row:  1, col:  0},\n  {row:  1, col:  1},\n  {row:  0, col: -1},\n  {row:  0, col:  1},\n  {row: -1, col: -1},\n  {row: -1, col:  0},\n  {row: -1, col:  1}\n];\n\nexport const countCells = (board:IBoardData):number =>\n  board.rows * board.cols;\n\nexport const getSurroundingCells = (cell:ICell, board:IBoardData):ICell[] => {\n  const adjacentTiles:ICell[] = [];\n\n  relativePositions.forEach((relPos:ICell):void => {\n    let relRow:number = cell.row + relPos.row;\n    let relCol:number = cell.col + relPos.col;\n\n    if (relRow >= 0 && relRow < board.rows && relCol >= 0 && relCol < board.cols) {\n      adjacentTiles.push({row: relRow, col: relCol});\n    }\n  });\n\n  return adjacentTiles;\n};\n\nexport const getXYFromCell = (cell:ICell, board:IBoardData):IPoint => ({\n  x: cell.col * board.size + board.size * .5,\n  y: cell.row * board.size + board.size * .5\n});\n\nexport const getCellFromXY = (point:IPoint, board:IBoardData):ICell => ({\n  row: point.y / board.size - .5,\n  col: point.x / board.size - .5\n});\n\nexport const getCellFromIndex = (index:number, board:IBoardData):ICell => ({\n  row: Math.floor(index / (board.rows - 1)),\n  col: index % board.cols\n});\n\nexport const getIndexFromCell = (cell:ICell, board:IBoardData):number =>\n  cell.row * board.cols + cell.col;\n\nexport const compareCells = (a:ICell, b:ICell):boolean =>\n  a.row === b.row && a.col === b.col;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/utils/boardUtils.ts","import MapElement from './MapElement';\nimport {IItem} from '../interfaces';\n\nexport default class Item extends MapElement {\n  protected __data:IItem;\n\n  constructor(game:Phaser.Game, x:number, y:number, size:number, data:IItem) {\n    super(game, x, y, size, 'items', data.frames);\n    this.__data = data;\n  }\n\n  get data():IItem {\n    return this.__data;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/prefabs/Item.ts","import MapElement from './MapElement';\nimport {IEnemy} from '../interfaces';\n\nexport default class Enemy extends MapElement {\n  protected __data:IEnemy;\n\n  constructor(game:Phaser.Game, x:number, y:number, size:number, data:IEnemy) {\n    super(game, x, y, size, 'heroes', data.frames);\n    this.__data = data;\n  }\n\n  get data():IEnemy {\n    return this.__data;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/prefabs/Enemy.ts","export default class GameOverState extends Phaser.State {\n  init() {\n    // Pass user score here\n    this.game.stage.backgroundColor = 0x330000;\n  }\n  create() {\n    const gameOverText = `Congratulations!\\nYou died.\\n\\nPress any key to restart`;\n    const gameOverLabel = this.game.add.text(this.game.world.width * .5, this.game.world.height * .5, gameOverText, {\n      font: '16px Pixel',\n      fill: '#ffffff',\n      align: 'center'\n    });\n    gameOverLabel.anchor.set(.5, .5);\n\n    this.game.input.keyboard.addCallbacks(null, () => {\n      this.game.input.keyboard.removeCallbacks();\n      this.state.start('Game');\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/states/GameOverState.ts"],"sourceRoot":""}